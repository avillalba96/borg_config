#!/bin/bash
# Script para backups programados de borg
# Version modificada de borg-cron-helper https://github.com/rugk/borg-cron-helper

# enable zsh compatibility: in ZSH word splitting is disabled by default,
# but we need it
setopt shwordsplit 2>/dev/null

#Variables
# basic, required information
export BORG_RSH='ssh -oBatchMode=yes -oStrictHostKeyChecking=no'

CLIENTS="/etc/lunix/borg/client"

# set placeholder/default value
PRUNE_PREFIX="null"
exitcode=0
exitcode_create=0
LOG_FILE="/var/log/borg/borg-prune.log"

# Overwrite config variables
# to include client name
overwrite_vars() {
    LOG_FILE="/var/log/borg/borg-prune.log"
	export BORG_REPO="$REPO"
	export BORG_PASSPHRASE="$REPO_PASS"
	SLEEP_TIME="3m"
	RETRY_NUM="3"
}
# Keep track oh highest exit code.
#
# args:
# $1 – number of new exit code
track_exitcode() {
	if [ "$1" -gt "$exitcode" ]; then
		exitcode="$1"
	fi
}

# Evaluate exit code of a borg run.
#
# args: none
# may exit
evaluateExitCodes() {
	# see https://borgbackup.readthedocs.io/en/stable/usage.html?highlight=return%20code#return-codes
	case $1 in
		2 )
			error_log "Borg exited with fatal error." #(2)

			# ignore last try
			if [ "$i" -lt "$RETRY_NUM" ]; then
				# wait some time to recover from the error
				info_log "Wait $SLEEP_TIME…"
				sleep "$SLEEP_TIME"

				# break-lock if backup has not locked by another process in the meantime
				if is_lock; then
					error_log "Backup \"$BACKUP_NAME\" is locked locally by other process. Cancel."
					exit 1
				fi

				if [ "$RUN_PID_DIR" != "" ]; then
					info_log "Breaking lock…"
					$BORG_BIN break-lock "$REPOSITORY"
				fi
			fi
			;;
		1 )
			error_log "Borg had some WARNINGS, but everything else was okay."
			;;
		0 )
			info_log "Borg has been successful."
			;;
		* )
			error_log "Unknown error with code $1 happened."
			;;
	esac
}

# log system
log_line() {
	echo "[$( date +'%F %T' )] $CONFIG"
}
info_log() {
	echo "$( log_line ): $*" >> $LOG_FILE
	echo "$( log_line ): $*" >&1
}
empty_line_log() {
	echo >> $LOG_FILE
	echo >&1
}
error_log() {
	echo "$( log_line ) ERROR: $*" >> $LOG_FILE
	echo "$( log_line ) ERROR: $*" >&2
}

# Evaluate whether the backup is locked.
#
# args: none
# returns: bool
is_lock() {
	# check if locking system is disabled
	if [ "$RUN_PID_DIR" = "" ]; then
		return 1 # not locked
	fi

	# when file is not present -> unlocked
	if [ ! -f "$RUN_PID_DIR/PRUNE_$BACKUP_NAME.pid" ]; then
		return 1 # false
	fi
	# when PID listed in file is not running -> unlocked
	if ! pgrep -F "$RUN_PID_DIR/PRUNE_$BACKUP_NAME.pid" > /dev/null; then
		return 1 # false
	fi

	return 0 # true, locked
}

# Locks the current backup.
#
# args: none
do_lock() {
	# check if locking system is disabled
	if [ "$RUN_PID_DIR" = "" ]; then
		return
	fi

	if [ ! -d "$RUN_PID_DIR" ]; then
		mkdir -p "$RUN_PID_DIR" || exit 2
	fi

	# write PID into file
	echo $$ > "$RUN_PID_DIR/PRUNE_$BACKUP_NAME.pid" || exit 2

	if ! is_lock; then
		error_log "Locking was not successful. Cancel."
		exit 2
	fi
}

# Removes the lock of the current backup.
#
# args: none
rm_lock() {
	# check if locking system is disabled
	if [ "$RUN_PID_DIR" = "" ]; then
		return
	fi

	rm "$RUN_PID_DIR/PRUNE_$BACKUP_NAME.pid"
}

# Checks in a loop whether we need to stop the loop or not and log messages.
#
# args:
# $1 – The number of the executed try.
# may exit
backupIterationLockCheck() {
	# if locked, stop backup
	if is_lock; then
		error_log "Backup $BACKUP_NAME is locked. Cancel."
		exit 1
	fi

	# otherwise log try (if useful)
	if [ "$1" -gt 1 ]; then
		info_log "$1. try…"
	fi
}

# Prettifies the time display so it looks good for user.
#
# Adopted from https://unix.stackexchange.com/questions/27013/displaying-seconds-as-days-hours-mins-seconds/170299#170299
# Edited.
#
# args:
# $1 – Time in seconds.
# returns: string
prettifyTimeDisplay()
{
    t=$1

    d=$((t/60/60/24))
    h=$((t/60/60%24))
    m=$((t/60%60))
    s=$((t%60))

	# only show seconds if < 1 minute
    if [ $d = 0 ] && [ $h = 0 ] && [ $m = 0 ]; then
    	[ $s = 1 ] && printf "%d second" $s || printf "%d seconds" $s

		# can skip other if clauses
		return
    fi

	# round up minutes if needed
	if [ $s -ge 30 ]; then
		m=$(( m+1 ))
	fi

    if [ $d -gt 0 ]; then
        [ $d = 1 ] && printf "%d day " $d || printf "%d days " $d
    fi
    if [ $h -gt 0 ]; then
        [ $h = 1 ] && printf "%d hour " $h || printf "%d hours " $h
    fi
    if [ $m -gt 0 ]; then
        [ $m = 1 ] && printf "%d minute " $m || printf "%d minutes " $m
    fi
}
# Return backup info from borg.
#
# The output is returned in several variables.
#
# args:
# $1 – Archive name
getBackupInfo() {
	# get output of borg info
	borginfo=$( $BORG_BIN info "::$1" )

	# get start/end time from output
	timeStart=$( echo "$borginfo"|grep 'Time (start):'|sed -E 's/Time \(start\): (.*)/\1/g' )
	timeEnd=$( echo "$borginfo"|grep 'Time (end):'|sed -E 's/Time \(end\): (.*)/\1/g' )

	timeStartSec=$( date --date="$timeStart" +"%s" )
	timeEndSec=$( date --date="$timeEnd" +"%s" )

	# calculate the difference, i.e. the duration of backup
	durationSec=$(( timeEndSec-timeStartSec ))
	duration=$( prettifyTimeDisplay "$durationSec" | xargs ) # trim sourounding spaces

	# extract the "deduplicated/compressed" value for each size
	size=$( echo "$borginfo"|grep 'This archive:'|sed -E 's/\s{2,}/|/g'|cut -d '|' -f 4 )
	sizeTotal=$( echo "$borginfo"|grep 'All archives:'|sed -E 's/\s{2,}/|/g'|cut -d '|' -f 4 )
}
# Return backup info from the last backup..
#
# The output is returned in several variables. (see getBackupInfo())
#
# args: None
getInfoAboutLastBackup() {
	# get last archive name of new backup
	lastArchive=$( $BORG_BIN list --short ::|tail -n 1 )
	# and get info about it
	getBackupInfo "$lastArchive"
}

# add trap to catch backup interruptions
trapterm() {
	rm_lock 2> /dev/null
	echo "$CONFIG: ERROR" > /etc/lunix/borg_prune_status
	error_log "Backup $BACKUP_NAME (PID: $$) interrupted by $1."
	exit 2
}
trap 'trapterm INT' INT
trap 'trapterm TERM' TERM

#Limpiamos estado del ultimo prune 
 > /etc/lunix/borg_prune_status

#Empezamos log
empty_line_log;
info_log "------------------------------------";
info_log "Comenzando proceso de prune"
info_log "------------------------------------";

#Entramos a carpeta de configuraciones
cd $CLIENTS || exit;

#Ejecutamos prune para cada archivo
for CONFIG in *.conf
do
	source "$CONFIG"
	overwrite_vars;

	# check that variables are set
	if [ "$BACKUP_NAME" = "" ] ||
	[ "$BORG_REPO" = "" ] ||
	[ "$BACKUP_DIRS" = "" ]; then
		error_log "Some required variables may not be set in the config file. Skipping prune for \"$CONFIG\" ."
		exit 2
	fi
	if ! export|grep -q "BORG_REPO"; then
		error_log "The BORG_REPO variable is not exported in the config file. Skipping prune for \"$CONFIG\" ."
		exit 2
	fi

	# check lock
	if is_lock; then
		error_log "Backup $BACKUP_NAME is locked. Prevent start."
		exit 1
	fi


	# The (optional) prefix makes sure only backups from this machine with this
	# backup-type are touched.
	# ($PRUNE_PARAMS intentionally not quoted)

	if [ "$PRUNE_PARAMS" ] ; then
		info_log "Running prune for \"$BACKUP_NAME\"…"

		# if RETRY_NUM_PRUNE is not set, fall back to RETRY_NUM
		[ "$RETRY_NUM_PRUNE" = "" ] && RETRY_NUM_PRUNE=$RETRY_NUM

		for i in $( seq "$(( RETRY_NUM_PRUNE+1 ))" ); do
			backupIterationLockCheck "$i"

			# add local lock
			do_lock

			# run prune
			$BORG_BIN prune -v --stats --list $PRUNE_PARAMS 2>> $LOG_FILE

			# check return code
			exitcode_prune=$?

			# remove local lock
			rm_lock

			# show output
			evaluateExitCodes "$exitcode_prune"

			# exit loop on non-critical errors (ignore 1 = warnings)
			if [ $exitcode_prune -le 1 ]; then
				# get out of loop
				break;
			fi
		done

		track_exitcode "$exitcode_prune"
	fi

	# log
	if [ "$exitcode" -ne 0 ]; then
		error_log "Prune \"$CONFIG\" ended, but it seems something went wrong."
		echo "$CONFIG: ERROR" >> /etc/lunix/borg_prune_status
	else
		info_log "Prune \"$CONFIG\" ended successfully."
		echo "$CONFIG: OK" >> /etc/lunix/borg_prune_status
	fi

	# Restauramos permisos para usuario borg
	chown borg.borg -R "$REPO"
	
	# Restauramos exitcode
	exitcode=0
done