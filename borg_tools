#!/usr/bin/env bash
#      __                _         _____   ____    __
#     / /   __  ______  (_)  __   / ___/  / __ \  / /
#    / /   / / / / __ \/ / |/_/   \__ \  / /_/ / / /
#   / /___/ /_/ / / / / />  <    ___/ / / _, _/ / /____
#  /_____/\__,_/_/ /_/_/_/|_|   /____(_)_/ |_(_)_____(_)
#
# Creado por Pablo Ramos
# Modificado por Alejandro Villalba
#
# Dependencies:
# borgbackup (https://github.com/borgbackup/borg)

DIR=/tmp/
TMP="/tmp/borgoptions"
rm $TMP >/dev/null 2>&1

#Colores de texto
NORMAL=$(tput sgr0)
RED=$(tput setaf 1)

#Carpeta con archivos de configuracion
CONF_FOLDER='/etc/lunix/borg'

borg_info() {
    clear
    if [ -z "$INFO_ARG" ]; then
        $BORG_BIN info
    else
        $BORG_BIN info "$BORG_REPO"::"$INFO_ARG"
    fi
    echo ""
}

borg_list() {
    GOT_CONF=0

    for a in $($BORG_BIN list --short); do
        echo "$a \"\"" >>$TMP
        GOT_CONF=1
    done
    if [ "$GOT_CONF" -eq 1 ]; then
        LISTRESTPOINT=$(dialog --stdout --menu "Selecciona un punto para utilizar: " 20 100 10 --file $TMP)
        if [ $? -eq 0 ]; then
            RESTPOINT="$LISTRESTPOINT"
            borg_mount
        fi
    else
        dialog --msgbox "No existen puntos de restauración" 10 50
    fi
    rm $TMP >/dev/null 2>&1
}

borg_mount() {
    if (whiptail --title "" --yesno "Estas seguro que quiere montar este punto de restaración? " 10 60); then
        clear
        if [ -z "$MOUNT_DEST" ]; then
            MOUNT_DEST="$DIR$RESTPOINT"
            if [ ! -d "$MOUNT_DEST" ]; then mkdir "$MOUNT_DEST"; fi
            $BORG_BIN mount "$BORG_REPO"::"$RESTPOINT" "$MOUNT_DEST"
            echo "Montaje realizado en $MOUNT_DEST"
            pause
        else
            if [ ! -d "$MOUNT_DEST" ]; then mkdir "$MOUNT_DEST"; fi
            $BORG_BIN mount "$BORG_REPO"::"$RESTPOINT" "$MOUNT_DEST"
            echo "Montaje realizado en $MOUNT_DEST"
            pause
        fi
    fi
}

borg_umount() {
    GOT_CONF=0

    FILE2=$(hostname -f)

    for a in $(ls -1 $DIR | grep "$FILE2" | grep "FULL-LOCAL"); do
        echo "$a \"\"" >>$TMP
        GOT_CONF=1
    done
    if [ "$GOT_CONF" -eq 1 ]; then
        LISTRESTPOINT=$(dialog --stdout --menu "Selecciona punto para desmontar: " 20 100 10 --file $TMP)
        if [ $? -eq 0 ]; then
            RESTPOINT="$DIR$LISTRESTPOINT"
            $BORG_BIN umount "$RESTPOINT"
            CHECKUMOUNT=$(ls -1 $RESTPOINT | wc -l)
            if [ "$CHECKUMOUNT" -eq 0 ]; then
                rm -r $RESTPOINT
            fi
            clear
            echo "Se desmonto el repositorio $RESTPOINT"
            pause
        fi
    else
        dialog --msgbox "No existen puntos montados" 10 50
    fi
    rm $TMP >/dev/null 2>&1
}

borg_check() {
    clear
    if [ -z "$CHECK_ARG" ]; then
        $BORG_BIN check -v -p "$BORG_REPO"
        echo ""
        exit
    else
        $BORG_BIN check -v -p "$BORG_REPO"::"$CHECK_ARG"
        echo ""
        exit
    fi
}

pause() {
    echo ""
    echo -e $'Presione cualquier tecla para continuar...\n'
    read -rs -n1
}

show_menu() {
    while true; do

        HEIGHT=15
        WIDTH=50
        CHOICE_HEIGHT=10
        BACKTITLE=""
        TITLE=""
        MENU="Selecciona alguna de las opciones:"

        OPTIONS=(1 "Información del repositorio"
            2 "Listar todos los puntos de restauración"
            3 "Desmontar un punto de restauración"
            4 "Chequear el repositorio"
            5 "Salir")

        CHOICE=$(dialog --clear \
            --backtitle "$BACKTITLE" \
            --title "$TITLE" \
            --menu "$MENU" \
            $HEIGHT $WIDTH $CHOICE_HEIGHT \
            "${OPTIONS[@]}" \
            2>&1 >/dev/tty)

        case $CHOICE in
        1)
            borg_info
            pause
            ;;
        2)
            borg_list
            ;;
        3)
            borg_umount
            ;;
        4)
            borg_check
            ;;
        5)
            clear
            exit
            ;;
        *)
            clear
            echo "${RED}Opción no valida ${NORMAL}"
            ;;
        esac
    done
}

select_conf() {
    #Consultamos que .conf queremos usar
    GOT_CONF=0

    for a in $(ls -1 $CONF_FOLDER | grep -E "(borgcron-.*.conf)"); do
        echo "$a \"\"" >>$TMP
        GOT_CONF=1
    done
    if [ "$GOT_CONF" -eq 1 ]; then
        FILE=$(dialog --stdout --menu "Selecciona la configuración: " 20 50 10 --file $TMP)
        if [ $? -eq 0 ]; then
            CONFIG="$CONF_FOLDER/$FILE"
        fi
    else
        dialog --msgbox "No existen archivos de configuración $CONFIG" 10 50
    fi
    rm $TMP >/dev/null 2>&1
}

main() {
    #Leemos variables de borgcron-local.conf
    if [ -e $CONFIG ]; then
        source $CONFIG
    else
        echo "${RED}No existe el archivo de configuración $CONFIG"
        exit
    fi

    #Comprobar que este definido borg
    clear
    [[ ${#BORG_BIN} -eq 0 ]] && echo "${RED}Es necesario definir el ejecutable de borg" && exit

    export BORG_RSH='ssh -oBatchMode=yes -oStrictHostKeyChecking=no'
    export BORG_REPO="ssh://$USER@$SERVER:$PORT$REPO"
    export BORG_PASSPHRASE="$REPO_PASS"
}

#Correr funcion main
select_conf
main
show_menu
