#!/usr/bin/env bash
#      __                _         _____   ____    __
#     / /   __  ______  (_)  __   / ___/  / __ \  / /
#    / /   / / / / __ \/ / |/_/   \__ \  / /_/ / / /
#   / /___/ /_/ / / / / />  <    ___/ / / _, _/ / /____
#  /_____/\__,_/_/ /_/_/_/|_|   /____(_)_/ |_(_)_____(_)
#
# Creado por Pablo Ramos
#
# Dependencies:
#  borgbackup (https://github.com/borgbackup/borg)
    
VERSION="0.7"
DIR=/tmp/
ERROR=0

#Colores de texto
BOLD=$(tput bold)
NORMAL=$(tput sgr0)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)

#Numeros
NUM_CHECK='^[0-9]+$'

#Carpeta con archivos de configuracion
CONF_FOLDER='/etc/lunix/borg/client'


show_help() {
    echo "uso: borg_tools"
    echo " "
    echo "${BOLD}borg_tools"
    echo "Herramienta de utilidades para borg de Lunix S.R.L."
    echo "Se ejecuta en un cliente con un archivo de configuración presente"
    echo "o indicando el archivo de configuración de forma manual"
    echo ""
    echo "${NORMAL}operaciones:"
    echo "  info ARCHIVE:      Sin argumento  muestra información sobre el repositorio total."
    echo "                     Si se indica un archivo, muestra información sobre este"
    echo "  list NUMBER:       Muestra una lista de los ultimos backups. Lista los ultimos 10 si no se indica un numero"
    echo "argumentos opcionales:"
    echo "   -c | --config              Utiliza el archivo de configuración"
    echo "                              especificado en lugar del por defecto"
    echo "   -h | --help                Muestra este mensaje"
    echo "   -v | --version             Muestra la version del script"
}

borg_info() {
    echo "___________________________________________________"
    if [ -z "$INFO_ARG" ]; then
        $BORG_BIN info
    else
        $BORG_BIN info "$BORG_REPO"::"$INFO_ARG"
    fi
    echo "___________________________________________________"
    echo ""
}

borg_list_new() {
    echo "___________________________________________________"
    if [ -z "$LIST_ARG" ]; then
        $BORG_BIN list --last 10
    else
        if [[ $LIST_ARG =~ $NUM_CHECK ]]; then
            $BORG_BIN list --last "$LIST_ARG"
        else 
            echo "El argumento de ${BOLD}list ${NORMAL}debe ser un numero"
        fi
    fi
    echo "___________________________________________________"
    echo ""
}

borg_list_old() {
    echo "___________________________________________________"
    if [ -z "$LIST_ARG" ]; then
        $BORG_BIN list --first 10
    else
        if [[ $LIST_ARG =~ $NUM_CHECK ]]; then
            $BORG_BIN list --first "$LIST_ARG"
        else 
            echo "El argumento de ${BOLD}list ${NORMAL}debe ser un numero"
        fi
    fi
    echo "___________________________________________________"
    echo ""
}

borg_mount() {
    echo "___________________________________________________"
    echo "Montando recurso..."
    if [ -z "$MOUNT_ARG" ]; then
        MOUNT_ARG=$( $BORG_BIN list --last 1 --short )
        if [ ! -d "/tmp/$MOUNT_ARG" ]; then mkdir /tmp/"$MOUNT_ARG"; fi
        $BORG_BIN mount "$BORG_REPO"::"$MOUNT_ARG" /tmp/"$MOUNT_ARG"
        echo "Montaje realizado en /tmp/$MOUNT_ARG"
    else
        if [ -z "$MOUNT_DEST" ]; then
            MOUNT_DEST="/tmp/$MOUNT_ARG"
            if [ ! -d "$MOUNT_DEST" ]; then mkdir "$MOUNT_DEST"; fi
            $BORG_BIN mount "$BORG_REPO"::"$MOUNT_ARG" "$MOUNT_DEST"
            echo "Montaje realizado en $MOUNT_DEST"
        else
            if [ ! -d "$MOUNT_DEST" ]; then mkdir "$MOUNT_DEST"; fi
            $BORG_BIN mount "$BORG_REPO"::"$MOUNT_ARG" "$MOUNT_DEST"
            echo "Montaje realizado en $MOUNT_DEST"
        fi
    fi
    echo "___________________________________________________"
    echo ""
}

borg_umount() {
    if [ -z "$UMOUNT_DEST" ]; then
        echo "${RED}Es necesario indicar la carpeta a desmontar"
        exit 2;
    else
        $BORG_BIN umount "$UMOUNT_DEST"
    fi
}

borg_check() {
    if [ -z "$CHECK_ARG" ]; then
        $BORG_BIN check -v -p "$BORG_REPO"
        echo ""
        exit ;
    else
        $BORG_BIN check -v -p "$BORG_REPO"::"$CHECK_ARG"
        echo ""
        exit ;
    fi
}

show_menu() {
while true; do
    echo "1) Información del repositorio"
    echo "2) Listar los 10 archivos mas recientes"
    echo "3) Listar los 10 archivos mas antiguos"
    echo "4) Montar un archivo"
    echo "5) Desmontar un archivo"
    echo "6) Chequear el repositorio"
    echo "7) Salir"
    read -p "Opción (1-7): " OPT
    case $OPT in
        1)
            borg_info ;;
        2)
            borg_list_new ;;
        3)
            borg_list_old ;;
        4)
            read -p "Ingrese nombre del archivo o deje vacio para montar el ultimo: " MOUNT_ARG;
            read -p "Ingrese carpeta de destino o deje vacio para montar en /tmp/: " MOUNT_DEST;
            borg_mount ;;
        5) 
            read -p "Ingrese carpeta a desmontar: " UMOUNT_DEST;
            borg_umount ;;
        6) 
            borg_check ;;
        7)
            exit ;;
        *)
            echo "${RED}Opción no valida ${NORMAL}" ;;
    esac
done
}

select_conf() {
    DIR_ORIGINAL=$(pwd)
    echo "Configuraciones disponibles:"
    cd $CONF_FOLDER && ls -1 *.conf |grep -v borgcron.conf ;
    cd "$DIR_ORIGINAL" || exit
    echo ""
    read -p "Seleccione archivo de configuracion: " CLIENT;
    CONFIG="$CONF_FOLDER/$CLIENT"
}

main() {
    
    #Leemos variables de borg.conf
    if [ -e "$CONFIG" ]; then
        source "$CONFIG"
    else
        echo "${RED}No existe el archivo de configuración $CONFIG"
        exit;
    fi

    #Comprobar que este definido borg
    [[ ${#BORG_BIN} -eq 0 ]] && echo "${RED}Es necesario definir el ejecutable de borg" && exit;

    export BORG_REPO="$REPO"
    export BORG_PASSPHRASE="$REPO_PASS"

}

#Si no hay argumentos, mostrar menu
if [ $# -eq 0 ]; then
    #Seleccionamos configuracion
    if [ -z "$CONFIG" ]; then
        select_conf
    fi
    #Cargamos variables
    main
    show_menu ;
    exit ;
else
    #Asignamos argumentos a variables
    while [[ "$1" ]]; do
        case "$1" in
            -c | --config)
                CONFIG=$2
                main
                shift ;;
            info )
                INFO_ARG=$2
                borg_info
                exit ;;
            list )
                LIST_ARG=$2
                borg_list_new
                exit ;;
            list_new )
                LIST_ARG=$2
                borg_list_new
                exit ;;
            list_old )
                LIST_ARG=$2
                borg_list_old
                exit ;;
            mount )
                MOUNT_ARG=$2
                MOUNT_DEST=$3
                borg_mount
                exit ;;
            umount )
                UMOUNT_DEST=$2
                burg_umount
                exit ;;
            -v | --version)
                echo $VERSION && exit ;;
            -h | --help)
                show_help && exit ;;
            -* )
                echo "Argumento invalido $1" && exit ;;
        esac
        shift
    done
fi
